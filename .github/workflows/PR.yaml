name: Process PR
on:
  pull_request:
    types: [opened]

jobs:
  process_pr:
    runs-on: ubuntu-latest
    env:
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 1: Clone the repository containing releases.yaml
      - name: Clone releases repository
        run: |
          git clone https://github.com/MohammadiIram/test-automerger.git
          echo "Releases repository cloned."

      # Step 2: Load releases.yaml and check branch
      - name: Load releases.yaml and check branch
        id: branch_check
        run: |
          import yaml

          # Load allowed releases from releases.yaml in the cloned repo
          with open("test-automerger/releases.yaml", "r") as f:
              releases_config = yaml.safe_load(f)
          
          # Get the base branch of the PR
          base_branch = "${{ github.event.pull_request.base.ref }}"

          # Check if base_branch is in allowed releases
          allowed_releases = releases_config.get("releases", [])
          if base_branch not in allowed_releases:
              print(f"Branch '{base_branch}' is not in allowed releases. Exiting.")
              exit(1)
          else:
              print(f"Branch '{base_branch}' is allowed. Proceeding.")

      # Step 3: Check if PR author is not 'red-hat-konflux[bot]'
      - name: Check PR author
        id: author_check
        run: |
          pr_author="${{ github.event.pull_request.user.login }}"
          if [ "$pr_author" == "red-hat-konflux[bot]" ]; then
            echo "PR author is 'red-hat-konflux[bot]'. Exiting."
            exit 1
          else
            echo "PR author is '$pr_author'. Proceeding."
          fi

      # Step 4: Run the Python script with PR ID if checks passed
      - name: Run Python script with PR ID
        if: ${{ steps.branch_check.outcome == 'success' && steps.author_check.outcome == 'success' }}
        run: |
          python your_script.py --pr-id ${{ github.event.pull_request.number }}
